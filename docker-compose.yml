version: "3"

volumes:
  postgres-data:
    # "local" â†’ Means that will store on /var/lib/docker/volumes/
    #           By this way, we don't override local postgresql /var/lib/postgres/data
    driver: local
  # app-gems:
    # driver: local
    # Linea de prueba

services:

  postgres:
    # image: postgres:9.5.4 # We'll use the official postgres image.
    image: postgres:10.3-alpine
    networks:
      - rails5-docker-alpine-network
    volumes:
      # Mounts a persistable volume inside the postgres data folder, so we
      # don't lose the created databases when this container is removed.
      - postgres-data:/var/lib/postgresql/data
    environment:
      # The password we'll use to access the databases:
      POSTGRES_PASSWORD: s0m3p455
    deploy: # Tiene sentido cuando sea desplegado con docker stack deploy
      placement:
        constraints: [node.role == manager]

  web:
    # Option 1
    # Build locally:
    build:
      context: .
      dockerfile: Dockerfile
    #
    # Options 2
    # Don't build: use a image previously built with docker command:
    # 2.1: Local previously built with
    #      docker build . -t localhost/biblioteca:testing
    # In this case, we call to local cache:
    # image: localhost/biblioteca:testing
    #
    # 2.2: Local previously built, and pushed to registry
    #      docker build . -t hub.supercanal.tv:5000/biblioteca:testing
    #      docker push hub.supercanal.tv:5000/biblioteca:testin
    # image: hub.supercanal.tv:5000/biblioteca:testing
    # Option 3 - Bring from intranet registry
    # 3.1: local cache
    # image: localhost/biblioteca:testing
    #
    # 3.2: local registry
    # image: hub.supercanal.tv:5000/biblioteca:testing
    #
    command: rails server -b 0.0.0.0 -p 3000
    networks: # Ver la diferencia con el networks de la base:
      - rails5-docker-alpine-network # aca lleva - porque es el ultimo nodo yml
    ports:
      # This will bind your port 3000 with the container's port 3000, so we can
      # use 'http://localhost:3000' to see our Rails app:
      - 3000:3000
    links:
      # Makes the postgres service a dependency for our app, and also makes it
      # visible at the 'db' hostname from this container:
      - postgres:db
    #entrypoint: /usr/src/app/development-entrypoint
    volumes:
      # Mounts the app code (".") into the container's "/usr/src/app" folder:
      - .:/usr/src/app
      # Mounts a persistable volume in the installed gems folder, so we can add
      # gems to the app without having to build the development image again:
      # - app-gems:/usr/local/bundle
    # Keeps the stdin open, so we can attach to our app container's process and
    # do stuff such as `byebug` or `binding.pry`:
    stdin_open: true
    # Allows us to send signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true
    environment:
      # Notice that this is the DB we'll use:
      DATABASE_URL: postgres://postgres:s0m3p455@db:5432/biblioteca_development
      # We'll use this env variable to make the log output gets directed
      # to Docker:
      RAILS_LOG_TO_STDOUT: "true"
    deploy: # Tiene sentido cuando sea desplegado con docker stack deploy
      mode: replicated
      replicas: 2
      labels: [APP=WEB]
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.3
      placement:
        constraints: [node.role == worker]

networks:
    rails5-docker-alpine-network:
